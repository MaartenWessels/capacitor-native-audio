{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export interface AudioPlayerDefaultParams {\r\n    /**\r\n     * Any string to differentiate different audio files.\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    audioId: string;\r\n}\r\n\r\nexport interface AudioPlayerPrepareParams extends AudioPlayerDefaultParams {\r\n    /**\r\n     * A URI for the audio file to play\r\n     *\r\n     * @example A public web source: https://example.com/example.mp3\r\n     * @since 1.0.0\r\n     */\r\n    audioSource: string;\r\n\r\n    /**\r\n     * The album title/name of the audio file to be used on the notification\r\n     *\r\n     * @since 2.1.0\r\n     */\r\n    albumTitle?: string;\r\n\r\n    /**\r\n     * The artist name of the audio file to be used on the notification\r\n     *\r\n     * @since 2.1.0\r\n     */\r\n    artistName?: string;\r\n\r\n    /**\r\n     * The title/name of the audio file to be used on the notification\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    friendlyTitle: string;\r\n\r\n    /**\r\n     * Whether to use this audio file for the notification.\r\n     * This is considered the primary audio to play.\r\n     *\r\n     * It must be created first and you may only have one at a time.\r\n     *\r\n     * @default false\r\n     * @since 1.0.0\r\n     */\r\n    useForNotification: boolean;\r\n\r\n    /**\r\n     * A URI for the album art image to display on the Android/iOS notification.\r\n     *\r\n     * Can also be an in-app source. Pulls from `android/app/src/assets/public` and `ios/App/App/public`.\r\n     * If using [Vite](https://vitejs.dev/guide/assets.html#the-public-directory),\r\n     * you would put the image in your `public` folder and the build process will copy to `dist`\r\n     * which in turn will be copied to the Android/iOS assets by Capacitor.\r\n     *\r\n     * A PNG is the best option with square dimensions. 1200 x 1200px is a good option.\r\n     *\r\n     * @example A public web source: https://example.com/artwork.png\r\n     * @example An in-app source: images/artwork.png\r\n     * @since 1.0.0\r\n     */\r\n    artworkSource?: string;\r\n\r\n    /**\r\n     * Is this audio for background music/audio.\r\n     *\r\n     * Should not be `true` when `useForNotification = true`.\r\n     *\r\n     * @default false\r\n     * @since 1.0.0\r\n     */\r\n    isBackgroundMusic?: boolean;\r\n\r\n    /**\r\n     * Whether or not to loop other audio like background music\r\n     * while the primary audio (`useForNotification = true`) is playing.\r\n     *\r\n     * @default false\r\n     * @since 1.0.0\r\n     */\r\n    loop?: boolean;\r\n\r\n    /**\r\n     * Whether or not to show the seek backward button on the OS's notification.\r\n     * Only has affect when `useForNotification = true`.\r\n     *\r\n     * @default true\r\n     * @since 1.2.0\r\n     */\r\n    showSeekBackward?: boolean;\r\n\r\n    /**\r\n     * Whether or not to show the seek forward button on the OS's notification.\r\n     * Only has affect when `useForNotification = true`.\r\n     *\r\n     * @default true\r\n     * @since 1.2.0\r\n     */\r\n    showSeekForward?: boolean;\r\n\r\n    /**\r\n     * The URL to fetch metadata updates at the specified interval. Typically used for a radio stream.\r\n     * See the section on [Metadata Updates](#metadata-updates) for more info.\r\n     * Only has affect when `useForNotification = true`.\r\n     *\r\n     * @since 2.2.0\r\n     */\r\n    metadataUpdateUrl?: string;\r\n\r\n    /**\r\n     * The interval to fetch metadata updates in seconds.\r\n     *\r\n     * @default 15\r\n     * @since 2.2.0\r\n     */\r\n    metadataUpdateInterval?: number;\r\n}\r\n\r\nexport interface AudioPlayerListenerParams {\r\n    /**\r\n     * The `audioId` set when `create` was called.\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    audioId: string;\r\n}\r\n\r\nexport interface AudioPlayerListenerResult {\r\n    callbackId: string;\r\n}\r\n\r\nexport interface AudioPlayerMetadataUpdateListenerEvent {\r\n    /**\r\n     * The album title\r\n     *\r\n     * @since 2.2.0\r\n     */\r\n    album_title: string;\r\n\r\n    /**\r\n     * The artist name\r\n     *\r\n     * @since 2.2.0\r\n     */\r\n    artist_name: string;\r\n\r\n    /**\r\n     * The song title\r\n     *\r\n     * @since 2.2.0\r\n     */\r\n    song_title: string;\r\n\r\n    /**\r\n     * A URI for the album art image to display on the Android/iOS notification.\r\n     *\r\n     * @since 2.2.0\r\n     */\r\n    artwork_source: string;\r\n}\r\n\r\nexport interface AudioPlayerPlugin {\r\n    /**\r\n     * Create an audio source to be played.\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    create(params: AudioPlayerPrepareParams): Promise<{ success: boolean }>;\r\n\r\n    /**\r\n     * Initialize the audio source. Prepares the audio to be played, buffers and such.\r\n     *\r\n     * Should be called after callbacks are registered (e.g. `onAudioReady`).\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    initialize(params: AudioPlayerDefaultParams): Promise<{ success: boolean }>;\r\n\r\n    /**\r\n     * Start native-level tracking of audio playback progress.\r\n     * Tracks individual seconds of audio that are actually played (not skipped or seeked over).\r\n     * Useful for analytics, progress tracking, or when JavaScript execution may be limited.\r\n     *\r\n     * @since 3.0.0\r\n     */\r\n    startBackgroundTracking(params: AudioPlayerDefaultParams & { duration: number }): Promise<void>;\r\n\r\n    /**\r\n     * Stop native-level tracking of audio playback progress.\r\n     * Call this when you no longer need to track playback seconds natively.\r\n     *\r\n     * @since 3.0.0\r\n     */\r\n    stopBackgroundTracking(params: AudioPlayerDefaultParams): Promise<void>;\r\n\r\n    /**\r\n     * Retrieve and clear the collected playback progress data.\r\n     * Returns an array of unique second timestamps that were actually played (excluding skipped content).\r\n     * The data is automatically cleared after fetching to prevent duplicate reporting.\r\n     *\r\n     * @since 3.0.0\r\n     */\r\n    fetchBackgroundPlayedSeconds(params: AudioPlayerDefaultParams): Promise<{ seconds: number[] }>;\r\n\r\n    /**\r\n     * Change the audio source on an existing audio source (`audioId`).\r\n     *\r\n     * This is useful for changing background music while the primary audio is playing\r\n     * or changing the primary audio before it is playing to accommodate different durations\r\n     * that a user can choose from.\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    changeAudioSource(params: AudioPlayerDefaultParams & { source: string }): Promise<void>;\r\n\r\n    /**\r\n     * Change the associated metadata of an existing audio source\r\n     *\r\n     * @since 1.1.0\r\n     */\r\n    changeMetadata(\r\n        params: AudioPlayerDefaultParams & {\r\n            albumTitle?: string;\r\n            artistName?: string;\r\n            friendlyTitle?: string;\r\n            artworkSource?: string;\r\n        },\r\n    ): Promise<void>;\r\n\r\n    /**\r\n     * Update metadata from Update URL\r\n     *\r\n     * This runs async on the native side. Use the `onMetadataUpdate` listener to get the updated metadata.\r\n     *\r\n     * @since 2.2.0\r\n     */\r\n    updateMetadata(params: AudioPlayerDefaultParams): Promise<void>;\r\n\r\n    /**\r\n     * Get the duration of the audio source.\r\n     *\r\n     * Should be called once the audio is ready (`onAudioReady`).\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    getDuration(params: AudioPlayerDefaultParams): Promise<{ duration: number }>;\r\n\r\n    /**\r\n     * Get the current time of the audio source being played.\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    getCurrentTime(params: AudioPlayerDefaultParams): Promise<{ currentTime: number }>;\r\n\r\n    /**\r\n     * Play the audio source.\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    play(params: AudioPlayerDefaultParams): Promise<void>;\r\n\r\n    /**\r\n     * Pause the audio source.\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    pause(params: AudioPlayerDefaultParams): Promise<void>;\r\n\r\n    /**\r\n     * Seek the audio source to a specific time.\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    seek(params: AudioPlayerDefaultParams & { timeInSeconds: number }): Promise<void>;\r\n\r\n    /**\r\n     * Stop playing the audio source and reset the current time to zero.\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    stop(params: AudioPlayerDefaultParams): Promise<void>;\r\n\r\n    /**\r\n     * Set the volume of the audio source. Should be a decimal less than or equal to `1.00`.\r\n     *\r\n     * This is useful for background music.\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    setVolume(params: AudioPlayerDefaultParams & { volume: number }): Promise<void>;\r\n\r\n    /**\r\n     * Set the rate for the audio source to be played at.\r\n     * Should be a decimal. An example being `1` is normal speed, `0.5` being half the speed and `1.5` being 1.5 times faster.\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    setRate(params: AudioPlayerDefaultParams & { rate: number }): Promise<void>;\r\n\r\n    /**\r\n     * Wether or not the audio source is currently playing.\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    isPlaying(params: AudioPlayerDefaultParams): Promise<{ isPlaying: boolean }>;\r\n\r\n    /**\r\n     * Destroy all resources for the audio source.\r\n     * The audio source with `useForNotification = true` must be destroyed last.\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    destroy(params: AudioPlayerDefaultParams): Promise<void>;\r\n\r\n    /**\r\n     * Register a callback for when the app comes to the foreground.\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    onAppGainsFocus(\r\n        params: AudioPlayerListenerParams,\r\n        callback: () => void,\r\n    ): Promise<AudioPlayerListenerResult>;\r\n\r\n    /**\r\n     * Registers a callback from when the app goes to the background.\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    onAppLosesFocus(\r\n        params: AudioPlayerListenerParams,\r\n        callback: () => void,\r\n    ): Promise<AudioPlayerListenerResult>;\r\n\r\n    /**\r\n     * Registers a callback for when the audio source is ready to be played.\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    onAudioReady(\r\n        params: AudioPlayerListenerParams,\r\n        callback: () => void,\r\n    ): Promise<AudioPlayerListenerResult>;\r\n\r\n    /**\r\n     * Registers a callback for when the audio source has ended (reached the end of the audio).\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    onAudioEnd(\r\n        params: AudioPlayerListenerParams,\r\n        callback: () => void,\r\n    ): Promise<AudioPlayerListenerResult>;\r\n\r\n    /**\r\n     * Registers a callback for when state of playback for the audio source has changed by external controls.\r\n     * This should be used to update your UI when the notification/external controls are used to control the playback.\r\n     *\r\n     * On Android, this also gets fired when your app changes the state (e.g. by calling `play`, `pause` or `stop`)\r\n     * due to a limitation of not knowing where the state change came from, either the app or the `MediaSession` (external controls).\r\n     *\r\n     * It may be fixed in the future for Android if a solution is found so don't rely on it when your app itself changes the state.\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    onPlaybackStatusChange(\r\n        params: AudioPlayerListenerParams,\r\n        callback: (result: { status: 'playing' | 'paused' | 'stopped' }) => void,\r\n    ): Promise<AudioPlayerListenerResult>;\r\n\r\n    /**\r\n     * Registers a callback for when metadata updates from a URL.\r\n     *\r\n     * It will return all data from the URL response, not just the required data. So you could have the metadata endpoint return other data that you may need.\r\n     *\r\n     * @since 2.2.0\r\n     */\r\n    onMetadataUpdate(\r\n        params: AudioPlayerListenerParams,\r\n        callback: (result: AudioPlayerMetadataUpdateListenerEvent) => void,\r\n    ): Promise<AudioPlayerListenerResult>;\r\n}\r\n"]}